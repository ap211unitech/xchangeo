type ERC20Token @entity(immutable: true) {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type Faucet @entity(immutable: true) {
  id: ID!
  tokenAddress: Bytes!
  faucetAddress: Bytes!
  lockTime: BigInt!
  withdrawalAmount: BigInt!
  timestamp: BigInt!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  token: ERC20Token # address of the token, zero for native tokens
  amount: BigInt! # uint256
  timestamp: BigInt!
  transactionHash: Bytes!
  eventType: String!
}

type Pool @entity {
  id: ID!
  pool: Bytes!

  # tokens involved
  tokenA: ERC20Token!
  tokenB: ERC20Token!
  lpToken: ERC20Token!

  # fee in basis points (e.g., 30 = 0.3%)
  fee: BigInt!

  # latest reserves
  reserveA: BigInt!
  reserveB: BigInt!

  # all-time stats
  allTimeVolumeA: BigInt! # total amount of tokenA traded
  allTimeVolumeB: BigInt! # total amount of tokenB traded
  allTimeFeesA: BigInt! # total fees collected in tokenA
  allTimeFeesB: BigInt! # total fees collected in tokenB
  
  timestamp: BigInt!
}

type PoolTransaction @entity(immutable: true) {
  id: ID!
  pool: Pool!
  tokenA: ERC20Token!
  tokenB: ERC20Token!
  sender: Bytes!
  amountA: BigInt!
  amountB: BigInt!
  timestamp: BigInt!
  eventType: String! # AddLiquidity, RemoveLiquidity, Swap
  
  # Fields for ALL event types
  # These will be populated for every event to track reserves
  reserveA: BigInt!
  reserveB: BigInt!

  # These are ONLY for Swap events
  feesA: BigInt!
  feesB: BigInt!

  # This is ONLY for AddLiquidity/RemoveLiquidity events (will be 0 otherwise)
  lpTokenAmount: BigInt!

  transactionHash: Bytes!
}
